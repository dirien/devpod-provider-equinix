/*
Metal API

Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package metalv1

import (
	"encoding/json"
)

// checks if the OtpSeed type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OtpSeed{}

// OtpSeed Details for configuring your MFA app
type OtpSeed struct {
	// The URI to use in your MFA app
	OtpUri               *string `json:"otp_uri,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _OtpSeed OtpSeed

// NewOtpSeed instantiates a new OtpSeed object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOtpSeed() *OtpSeed {
	this := OtpSeed{}
	return &this
}

// NewOtpSeedWithDefaults instantiates a new OtpSeed object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOtpSeedWithDefaults() *OtpSeed {
	this := OtpSeed{}
	return &this
}

// GetOtpUri returns the OtpUri field value if set, zero value otherwise.
func (o *OtpSeed) GetOtpUri() string {
	if o == nil || IsNil(o.OtpUri) {
		var ret string
		return ret
	}
	return *o.OtpUri
}

// GetOtpUriOk returns a tuple with the OtpUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OtpSeed) GetOtpUriOk() (*string, bool) {
	if o == nil || IsNil(o.OtpUri) {
		return nil, false
	}
	return o.OtpUri, true
}

// HasOtpUri returns a boolean if a field has been set.
func (o *OtpSeed) HasOtpUri() bool {
	if o != nil && !IsNil(o.OtpUri) {
		return true
	}

	return false
}

// SetOtpUri gets a reference to the given string and assigns it to the OtpUri field.
func (o *OtpSeed) SetOtpUri(v string) {
	o.OtpUri = &v
}

func (o OtpSeed) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OtpSeed) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OtpUri) {
		toSerialize["otp_uri"] = o.OtpUri
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *OtpSeed) UnmarshalJSON(data []byte) (err error) {
	varOtpSeed := _OtpSeed{}

	err = json.Unmarshal(data, &varOtpSeed)

	if err != nil {
		return err
	}

	*o = OtpSeed(varOtpSeed)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "otp_uri")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOtpSeed struct {
	value *OtpSeed
	isSet bool
}

func (v NullableOtpSeed) Get() *OtpSeed {
	return v.value
}

func (v *NullableOtpSeed) Set(val *OtpSeed) {
	v.value = val
	v.isSet = true
}

func (v NullableOtpSeed) IsSet() bool {
	return v.isSet
}

func (v *NullableOtpSeed) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOtpSeed(val *OtpSeed) *NullableOtpSeed {
	return &NullableOtpSeed{value: val, isSet: true}
}

func (v NullableOtpSeed) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOtpSeed) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
